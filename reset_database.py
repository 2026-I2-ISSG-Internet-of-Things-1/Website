#!/usr/bin/env python3
"""
Script pour nettoyer compl√®tement la base de donn√©es et cr√©er la nouvelle structure MyAsset
"""

import mysql.connector
from dotenv import load_dotenv
import os
import sys

# Charger les variables d'environnement
load_dotenv()


def get_db_connection():
    """Cr√©er une connexion √† la base de donn√©es"""
    try:
        return mysql.connector.connect(
            host=os.getenv("DB_HOST"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
            database=os.getenv("DB_NAME"),
        )
    except mysql.connector.Error as e:
        print(f"Erreur de connexion √† la base de donn√©es: {e}")
        return None


def reset_database():
    """Nettoyer compl√®tement la base de donn√©es et cr√©er la nouvelle structure"""
    conn = get_db_connection()
    if not conn:
        print("Impossible de se connecter √† la base de donn√©es")
        return False

    try:
        cursor = conn.cursor()

        print("üîÑ Suppression de toutes les tables existantes...")

        # D√©sactiver les v√©rifications de cl√©s √©trang√®res temporairement
        cursor.execute("SET FOREIGN_KEY_CHECKS = 0;")

        # R√©cup√©rer toutes les tables existantes
        cursor.execute("SHOW TABLES;")
        tables = cursor.fetchall()

        # Supprimer toutes les tables une par une
        for table in tables:
            table_name = table[0]
            print(f"  - Suppression de la table: {table_name}")
            cursor.execute(f"DROP TABLE IF EXISTS `{table_name}`;")

        # R√©activer les v√©rifications de cl√©s √©trang√®res
        cursor.execute("SET FOREIGN_KEY_CHECKS = 1;")

        print("‚úÖ Toutes les tables ont √©t√© supprim√©es")
        print("")
        print("üèóÔ∏è  Cr√©ation de la nouvelle table MyAsset...")

        # Cr√©er la nouvelle table MyAsset avec la structure sp√©cifi√©e
        create_table_query = """
        CREATE TABLE MyAsset (
            MyAssetNumber INT(11) AUTO_INCREMENT PRIMARY KEY,
            MyAssetType CHAR(12) NOT NULL,
            MyAssetName CHAR(20) NOT NULL,
            MyAssetValue FLOAT NOT NULL,
            MyAssetUnit CHAR(12) NOT NULL,
            MyAssetComment TEXT,
            MyAssetTimeStamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        """

        cursor.execute(create_table_query)
        print("‚úÖ Table MyAsset cr√©√©e avec succ√®s")
        print("")
        print("üìã Structure de la nouvelle table:")
        print("   - MyAssetNumber: INT(11) AUTO_INCREMENT PRIMARY KEY")
        print("   - MyAssetType: CHAR(12) NOT NULL")
        print("   - MyAssetName: CHAR(20) NOT NULL")
        print("   - MyAssetValue: FLOAT NOT NULL")
        print("   - MyAssetUnit: CHAR(12) NOT NULL")
        print("   - MyAssetComment: TEXT")
        print("   - MyAssetTimeStamp: TIMESTAMP (auto-g√©n√©r√©)")
        print("")

        # Ajouter quelques donn√©es d'exemple pour tester
        print("üìù Ajout de donn√©es d'exemple...")
        sample_data = [
            (
                "temperature",
                "Capteur Temp 1",
                23.5,
                "¬∞C",
                "Capteur de temp√©rature salon",
            ),
            ("humidity", "Capteur Hum 1", 65.2, "%", "Capteur d'humidit√© salon"),
            (
                "pressure",
                "Capteur Press 1",
                1013.25,
                "hPa",
                "Capteur de pression atmosph√©rique",
            ),
            ("light", "Capteur Lum 1", 750.0, "lux", "Capteur de luminosit√©"),
            ("button", "Bouton 1", 0.0, "bool", "Bouton poussoir principal"),
        ]

        insert_query = """
        INSERT INTO MyAsset (MyAssetType, MyAssetName, MyAssetValue, MyAssetUnit, MyAssetComment)
        VALUES (%s, %s, %s, %s, %s)
        """

        cursor.executemany(insert_query, sample_data)
        print(f"‚úÖ {len(sample_data)} entr√©es d'exemple ajout√©es")

        # Valider les changements
        conn.commit()
        print("")
        print("üéâ Base de donn√©es r√©initialis√©e avec succ√®s!")
        print("üìä Vous pouvez maintenant utiliser la nouvelle structure MyAsset")

        # Afficher le contenu de la table pour v√©rification
        print("")
        print("üìã Contenu actuel de la table MyAsset:")
        cursor.execute("SELECT * FROM MyAsset ORDER BY MyAssetNumber;")
        rows = cursor.fetchall()

        print(
            f"{'ID':<4} {'Type':<12} {'Name':<20} {'Value':<8} {'Unit':<12} {'Comment':<30} {'Timestamp'}"
        )
        print("-" * 100)
        for row in rows:
            print(
                f"{row[0]:<4} {row[1]:<12} {row[2]:<20} {row[3]:<8} {row[4]:<12} {row[5] or '':<30} {row[6]}"
            )

        cursor.close()
        conn.close()
        return True

    except mysql.connector.Error as e:
        print(f"‚ùå Erreur MySQL: {e}")
        conn.rollback()
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        conn.rollback()
        return False
    finally:
        if conn.is_connected():
            conn.close()


def main():
    """Fonction principale"""
    print("üö® ATTENTION: Ce script va SUPPRIMER TOUTES les donn√©es de la base!")
    print("üìã Nouvelle structure qui sera cr√©√©e:")
    print("   Table: MyAsset")
    print(
        "   Colonnes: MyAssetNumber (PK), MyAssetType, MyAssetName, MyAssetValue, MyAssetUnit, MyAssetComment, MyAssetTimeStamp"
    )
    print("")

    # Demander confirmation
    if len(sys.argv) > 1 and sys.argv[1] == "--confirm":
        confirmation = "oui"
    else:
        confirmation = input(
            "√ätes-vous s√ªr de vouloir continuer? (tapez 'oui' pour confirmer): "
        )

    if confirmation.lower() == "oui":
        print("")
        print("üöÄ D√©marrage de la r√©initialisation de la base de donn√©es...")
        print("")
        if reset_database():
            print("")
            print("‚úÖ R√©initialisation termin√©e avec succ√®s!")
            sys.exit(0)
        else:
            print("")
            print("‚ùå √âchec de la r√©initialisation")
            sys.exit(1)
    else:
        print("‚ùå Op√©ration annul√©e")
        sys.exit(0)


if __name__ == "__main__":
    main()
