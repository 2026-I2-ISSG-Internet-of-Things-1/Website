#!/usr/bin/env python3
"""
Configuration simplifi√©e AWS IoT Core pour EFREI
Version qui fonctionne avec boto3 uniquement (sans AWS CLI)
"""

import os
from dotenv import load_dotenv

load_dotenv()


def create_credentials_file():
    """
    Cr√©e un guide pour configurer les credentials AWS manuellement
    """
    print("üîê Configuration des credentials AWS IoT Core")
    print("=" * 55)
    print("Vous devez configurer vos credentials AWS dans le fichier .env")
    print("\nüìù √âtapes √† suivre :")
    print("1. Demandez √† votre enseignant EFREI :")
    print("   - AWS_ACCESS_KEY_ID")
    print("   - AWS_SECRET_ACCESS_KEY")
    print("\n2. Mettez √† jour votre fichier .env avec ces valeurs")

    # V√©rifier si le .env contient d√©j√† des credentials
    try:
        with open(".env", "r") as f:
            content = f.read()

        if "AWS_ACCESS_KEY_ID=votre-access-key" in content:
            print("\n‚ö†Ô∏è  ATTENTION: Vous devez mettre √† jour les credentials dans .env")
            print("   Remplacez 'votre-access-key' et 'votre-secret-key'")
            print("   par les vraies valeurs fournies par votre enseignant")
        else:
            print("\n‚úì Le fichier .env semble configur√©")

    except FileNotFoundError:
        print("\n‚ùå Fichier .env non trouv√©")


def test_aws_connection():
    """
    Teste la connexion AWS avec boto3
    """
    try:
        import boto3
        from botocore.exceptions import ClientError, NoCredentialsError

        # Charger les credentials depuis .env
        aws_access_key = os.getenv("AWS_ACCESS_KEY_ID")
        aws_secret_key = os.getenv("AWS_SECRET_ACCESS_KEY")

        if not aws_access_key or aws_access_key == "votre-access-key":
            print("‚ùå AWS_ACCESS_KEY_ID non configur√© dans .env")
            return False

        if not aws_secret_key or aws_secret_key == "votre-secret-key":
            print("‚ùå AWS_SECRET_ACCESS_KEY non configur√© dans .env")
            return False

        # Test de connexion
        sts = boto3.client(
            "sts",
            region_name="eu-west-3",
            aws_access_key_id=aws_access_key,
            aws_secret_access_key=aws_secret_key,
        )

        response = sts.get_caller_identity()
        print(f"‚úì Connexion AWS r√©ussie !")
        print(f"‚úì Account ID: {response['Account']}")
        print(f"‚úì User ARN: {response['Arn']}")
        return True

    except NoCredentialsError:
        print("‚ùå Credentials AWS non trouv√©s")
        return False
    except ClientError as e:
        print(f"‚ùå Erreur AWS: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False


def check_prerequisites():
    """
    V√©rifie que tout est pr√™t pour la configuration
    """
    print("üîç V√©rification des pr√©requis...")

    # V√©rifier boto3
    try:
        import boto3

        print("‚úì boto3 install√©")
    except ImportError:
        print("‚ùå boto3 non install√© - lancez: pip install boto3")
        return False

    # V√©rifier awsiotsdk
    try:
        import awsiotsdk

        print("‚úì awsiotsdk install√©")
    except ImportError:
        print("‚ùå awsiotsdk non install√© - lancez: pip install awsiotsdk")
        return False

    # V√©rifier le fichier .env
    if os.path.exists(".env"):
        print("‚úì Fichier .env trouv√©")
    else:
        print("‚ùå Fichier .env non trouv√©")
        return False

    return True


def main():
    """
    Configuration guid√©e pour EFREI
    """
    print("üöÄ Configuration AWS IoT Core - EFREI Groupe User03")
    print("Base de donn√©es: mariadb-efrei-iot-2025 (eu-west-3)")
    print("=" * 60)

    # √âtape 1: V√©rifier les pr√©requis
    if not check_prerequisites():
        print("\n‚ùå Pr√©requis manquants - installez d'abord les d√©pendances")
        return

    # √âtape 2: Guide credentials
    print("\n" + "=" * 60)
    create_credentials_file()

    print("\n" + "=" * 60)
    print("‚è∏Ô∏è  PAUSE - Configurez vos credentials AWS dans .env")
    print("=" * 60)
    print("1. Ouvrez le fichier .env dans votre √©diteur")
    print("2. Remplacez 'votre-access-key' par votre vraie cl√© AWS")
    print("3. Remplacez 'votre-secret-key' par votre vraie cl√© secr√®te AWS")
    print("4. Sauvegardez le fichier")

    input("\n‚è∏Ô∏è  Appuyez sur Entr√©e quand c'est fait...")

    # √âtape 3: Test de connexion
    print("\nüîå Test de la connexion AWS...")
    if not test_aws_connection():
        print("\n‚ùå Configuration AWS √©chou√©e")
        print("üí° V√©rifiez vos credentials dans le fichier .env")
        return

    # √âtape 4: Instructions pour la suite
    print("\n" + "=" * 60)
    print("‚úÖ Configuration AWS pr√™te !")
    print("=" * 60)
    print("üöÄ Prochaines √©tapes :")
    print("1. Lancez le script complet : python setup_efrei_aws_iot.py")
    print("   (Ce script cr√©era vos certificats IoT)")
    print("\n2. Ou lancez directement votre app : python app.py")
    print("   (L'app fonctionne m√™me sans AWS IoT)")

    print("\nüìã Votre configuration actuelle :")
    print("‚Ä¢ Base de donn√©es : MariaDB (eu-west-3) ‚úì")
    print("‚Ä¢ Credentials AWS : Configur√©s ‚úì")
    print("‚Ä¢ R√©gion AWS : eu-west-3 ‚úì")
    print("‚Ä¢ Packages Python : Install√©s ‚úì")

    print("\nüì° Topics MQTT qui seront utilis√©s :")
    print("‚Ä¢ efrei/grpuser03/led/commands")
    print("‚Ä¢ efrei/grpuser03/sensors/+/data")
    print("‚Ä¢ efrei/grpuser03/device/status")


if __name__ == "__main__":
    main()
